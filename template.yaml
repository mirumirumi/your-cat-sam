AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  your-cat

  Sample SAM Template for your-cat

Globals:
  Function:
    MemorySize: 3333
    Timeout: 13
  Api:
    OpenApiVersion: 3.0.2  # 勝手にStageが作られる回避：https://is.gd/4gPtX6


Parameters:
  ResourcePrefix:
    Type: String
    Default: yourcat
  EnvironmentName:
    Type: String
    AllowedValues:
      - dev
      - prd


Resources:
  ImageS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ResourcePrefix}-${EnvironmentName}-image
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
  ImageS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ImageS3Bucket
                - /*
            Principal: '*'

  RestApis:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${ResourcePrefix}-${EnvironmentName}
      StageName: !Sub ${ResourcePrefix}-${EnvironmentName}-apis
      # API側の定義でキー必須にする(Auth:を記述)とOPTIONSで引っかかるので不記載
      # Auth:
      #   ApiKeyRequired: true
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token''"
        AllowMethods: "'POST, OPTIONS'"
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
     - RestApis
     - RestApisStage  # https://is.gd/CxvJeX
    Properties:
      Name: !Sub ${ResourcePrefix}-${EnvironmentName}-api-key
      Enabled: true
      StageKeys:
        - RestApiId: !Ref RestApis
          StageName:
            !Sub ${ResourcePrefix}-${EnvironmentName}-apis
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - RestApis
      - RestApisStage  # https://is.gd/CxvJeX
    Properties:
      ApiStages:
        - ApiId: !Ref RestApis
          Stage:
            !Sub ${ResourcePrefix}-${EnvironmentName}-apis
      Throttle:
        BurstLimit: 2000
        RateLimit: 1000
      UsagePlanName: !Sub ${ResourcePrefix}-${EnvironmentName}-api-usage-plan
  ApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - ApiKey
      - ApiUsagePlan
    Properties :
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  GetImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-${EnvironmentName}-get-image
      CodeUri: functions/
      Handler: get_image.lambda_handler
      Runtime: python3.8
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref ImageS3Bucket
        - DynamoDBCrudPolicy:
            TableName: !Sub ${ResourcePrefix}-${EnvironmentName}-image
        - DynamoDBCrudPolicy:
            TableName: !Sub ${ResourcePrefix}-${EnvironmentName}-image-count
      Layers:
        - !Ref ImportModulesLayer
        - !Ref UtilsLayer
      Environment:
        Variables:
          Image_S3_BUCKET_NAME: !Ref ImageS3Bucket
          IMAGE_TABLE_NAME: !Sub ${ResourcePrefix}-${EnvironmentName}-image
          IMAGE_COUNT_TABLE_NAME: !Sub ${ResourcePrefix}-${EnvironmentName}-image-count
      Events:
        RestApis:
          Type: Api
          Properties:
            RestApiId: !Ref RestApis
            Path: /get-image
            Method: get
            # GETだけにキー必須になるようにこっちで書く
            Auth:
              ApiKeyRequired: true
  IsTheCatFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-${EnvironmentName}-is-the-cat
      CodeUri: functions/
      Handler: is_the_cat.lambda_handler
      Runtime: python3.8
      Policies:
        - RekognitionDetectOnlyPolicy: {}
      Layers:
        - !Ref ImportModulesLayer
        - !Ref UtilsLayer
      Events:
        RestApis:
          Type: Api
          Properties:
            RestApiId: !Ref RestApis
            Path: /is-the-cat
            Method: post
            # POSTだけにキー必須になるようにこっちで書く
            Auth:
              ApiKeyRequired: true
  PostImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-${EnvironmentName}-post-image
      CodeUri: functions/
      Handler: post_image.lambda_handler
      Runtime: python3.8
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref ImageS3Bucket
        - DynamoDBCrudPolicy:
            TableName: !Sub ${ResourcePrefix}-${EnvironmentName}-image
        - DynamoDBCrudPolicy:
            TableName: !Sub ${ResourcePrefix}-${EnvironmentName}-image-count
      Layers:
        - !Ref ImportModulesLayer
        - !Ref UtilsLayer
      Environment:
        Variables:
          Image_S3_BUCKET_NAME: !Ref ImageS3Bucket
          IMAGE_TABLE_NAME: !Sub ${ResourcePrefix}-${EnvironmentName}-image
          IMAGE_COUNT_TABLE_NAME: !Sub ${ResourcePrefix}-${EnvironmentName}-image-count
      Events:
        RestApis:
          Type: Api
          Properties:
            RestApiId: !Ref RestApis
            Path: /post-image
            Method: post
            # POSTだけにキー必須になるようにこっちで書く
            Auth:
              ApiKeyRequired: true

  ImportModulesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: import modules containing PowerTools
      ContentUri: "import_modules_layer/"
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8
  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: utils
      ContentUri: "utils_layer/"
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8

  ImageDataDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub ${ResourcePrefix}-${EnvironmentName}-image
      KeySchema: 
        - AttributeName: increment_num
          KeyType: HASH
      AttributeDefinitions: 
        - AttributeName: increment_num
          AttributeType: N
      BillingMode: PROVISIONED
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  ImageCountDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub ${ResourcePrefix}-${EnvironmentName}-image-count
      KeySchema: 
        - AttributeName: type
          KeyType: HASH
      AttributeDefinitions: 
        - AttributeName: type
          AttributeType: S
      BillingMode: PROVISIONED
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ImageDataRCUScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - ImageDataDynamoDBTable
    Properties: 
      MinCapacity: 1
      MaxCapacity: 30
      ResourceId: !Join ["", ["table/", !Ref ImageDataDynamoDBTable]]
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb
  ImageDataWCUScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - ImageDataDynamoDBTable
    Properties: 
      MinCapacity: 1
      MaxCapacity: 30
      ResourceId: !Join ["", ["table/", !Ref ImageDataDynamoDBTable]]
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  ImageCountRCUScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - ImageCountDynamoDBTable
    Properties: 
      MinCapacity: 1
      MaxCapacity: 30
      ResourceId: !Join ["", ["table/", !Ref ImageCountDynamoDBTable]]
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb
  ImageCountWCUScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - ImageCountDynamoDBTable
    Properties: 
      MinCapacity: 1
      MaxCapacity: 30
      ResourceId: !Join ["", ["table/", !Ref ImageCountDynamoDBTable]]
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb

  ImageDataReadScalingPolicy: 
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties: 
      PolicyName: image-data-read-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: 
        Ref: ImageDataRCUScalableTarget
      TargetTrackingScalingPolicyConfiguration: 
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification: 
          PredefinedMetricType: DynamoDBReadCapacityUtilization
  ImageDataWriteScalingPolicy: 
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties: 
      PolicyName: image-data-write-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: 
        Ref: ImageDataWCUScalableTarget
      TargetTrackingScalingPolicyConfiguration: 
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification: 
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  ImageCountReadScalingPolicy: 
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties: 
      PolicyName: image-count-read-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: 
        Ref: ImageCountRCUScalableTarget
      TargetTrackingScalingPolicyConfiguration: 
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification: 
          PredefinedMetricType: DynamoDBReadCapacityUtilization
  ImageCountWriteScalingPolicy: 
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties: 
      PolicyName: image-count-write-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: 
        Ref: ImageCountWCUScalableTarget
      TargetTrackingScalingPolicyConfiguration: 
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification: 
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

  AutoScalingRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - application-autoscaling.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: "/"
      Policies: 
        - PolicyName: autoscaling-role-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action:          
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"


# Outputs:


