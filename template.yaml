AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: photo-cat

Globals:
  Function:
    MemorySize: 3333
    Timeout: 13
    Layers:
      - !Ref ImportModulesLayer
      - !Ref UtilsLayer
    Environment:
      Variables:
        API_ALLOW_ORIGIN: !Sub ${ApiAllowOrigin}
  Api:
    OpenApiVersion: 3.0.2  # 勝手にStageが作られる回避：https://is.gd/4gPtX6


Parameters:
  ResourcePrefix:
    Type: String
    Default: photocat
  EnvironmentName:
    Type: String
    AllowedValues:
      - dev
      - prd
  ApiAllowOrigin:
    Type: String


Resources:
  # ImageS3Bucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Sub ${ResourcePrefix}-${EnvironmentName}-image
  #     CorsConfiguration:
  #       CorsRules:
  #         - AllowedMethods:
  #             - GET
  #           AllowedOrigins:
  #             - '*'
  # ImageS3BucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref ImageS3Bucket
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Action:
  #             - 's3:GetObject'
  #           Effect: Allow
  #           Resource: !Join
  #             - ''
  #             - - 'arn:aws:s3:::'
  #               - !Ref ImageS3Bucket
  #               - /*
  #           Principal: '*'
  # ImageDataCacheBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Sub ${ResourcePrefix}-${EnvironmentName}-image-data-cache

  RestApis:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${ResourcePrefix}-${EnvironmentName}
      StageName: !Sub ${ResourcePrefix}-${EnvironmentName}-apis
      # API側の定義でキー必須にする(Auth:を記述)とOPTIONSで引っかかるので不記載
      # Auth:
      #   ApiKeyRequired: true
      Cors:
        AllowOrigin: !Sub "'${ApiAllowOrigin}'"
        AllowHeaders: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token'"
        AllowMethods: "'POST, OPTIONS'"
  # ApiKey:
  #   Type: AWS::ApiGateway::ApiKey
  #   DependsOn:
  #    - RestApis
  #    - RestApisStage  # https://is.gd/CxvJeX
  #   Properties:
  #     Name: !Sub ${ResourcePrefix}-${EnvironmentName}-api-key
  #     Enabled: true
  #     StageKeys:
  #       - RestApiId: !Ref RestApis
  #         StageName:
  #           !Sub ${ResourcePrefix}-${EnvironmentName}-apis
  # ApiUsagePlan:
  #   Type: AWS::ApiGateway::UsagePlan
  #   DependsOn:
  #     - RestApis
  #     - RestApisStage  # https://is.gd/CxvJeX
  #   Properties:
  #     ApiStages:
  #       - ApiId: !Ref RestApis
  #         Stage:
  #           !Sub ${ResourcePrefix}-${EnvironmentName}-apis
  #     Throttle:
  #       BurstLimit: 2000
  #       RateLimit: 1000
  #     UsagePlanName: !Sub ${ResourcePrefix}-${EnvironmentName}-api-usage-plan
  # ApiUsagePlanKey:
  #   Type: AWS::ApiGateway::UsagePlanKey
  #   DependsOn:
  #     - ApiKey
  #     - ApiUsagePlan
  #   Properties :
  #     KeyId: !Ref ApiKey
  #     KeyType: API_KEY
  #     UsagePlanId: !Ref ApiUsagePlan

  GetImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-${EnvironmentName}-get-image
      CodeUri: functions/
      Handler: get_image.lambda_handler
      Runtime: python3.8
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Sub yourcat-${EnvironmentName}-image-data-cache
      Environment:
        Variables:
          Cache_S3_BUCKET_NAME: !Sub yourcat-${EnvironmentName}-image-data-cache
      Events:
        RestApis:
          Type: Api
          Properties:
            RestApiId: !Ref RestApis
            Path: /get-image
            Method: get
            # # GETだけにキー必須になるようにこっちで書く
            # Auth:
            #   ApiKeyRequired: true
  IsTheCatFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-${EnvironmentName}-is-the-cat
      CodeUri: functions/
      Handler: is_the_cat.lambda_handler
      Runtime: python3.8
      Policies:
        - RekognitionDetectOnlyPolicy: {}
      Events:
        RestApis:
          Type: Api
          Properties:
            RestApiId: !Ref RestApis
            Path: /is-the-cat
            Method: post
            # # POSTだけにキー必須になるようにこっちで書く
            # Auth:
            #   ApiKeyRequired: true
  PostImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-${EnvironmentName}-post-image
      CodeUri: functions/
      Handler: post_image.lambda_handler
      Runtime: python3.8
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Sub yourcat-${EnvironmentName}-image
        - S3FullAccessPolicy:
            BucketName: !Sub yourcat-${EnvironmentName}-image-data-cache
        - DynamoDBCrudPolicy:
            TableName: !Sub yourcat-${EnvironmentName}-image
      Environment:
        Variables:
          Image_S3_BUCKET_NAME: !Sub yourcat-${EnvironmentName}-image
          Cache_S3_BUCKET_NAME: !Sub yourcat-${EnvironmentName}-image-data-cache
          IMAGE_TABLE_NAME: !Sub yourcat-${EnvironmentName}-image
      Events:
        RestApis:
          Type: Api
          Properties:
            RestApiId: !Ref RestApis
            Path: /post-image
            Method: post
            # # POSTだけにキー必須になるようにこっちで書く
            # Auth:
            #   ApiKeyRequired: true

  ImportModulesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: import modules containing PowerTools
      ContentUri: "import_modules_layer/"
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8
  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: utils
      ContentUri: "utils_layer/"
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8

  # ImageDataDynamoDBTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties: 
  #     TableName: !Sub ${ResourcePrefix}-${EnvironmentName}-image
  #     KeySchema: 
  #       - AttributeName: file_id
  #         KeyType: HASH
  #     AttributeDefinitions:
  #       - AttributeName: file_id
  #         AttributeType: S
  #     BillingMode: PAY_PER_REQUEST 
